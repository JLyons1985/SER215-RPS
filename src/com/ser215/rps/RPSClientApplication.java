/*
 * This is the main application class for the rock paper scissors game.
 */
package com.ser215.rps;

// Imports
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.*;
import java.net.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import com.google.gson.Gson;

/**
 *
 * @author Josh Lyons, Nergal Givarkes
 */
public class RPSClientApplication extends javax.swing.JFrame {
    
    // Class Variables
    private String masterServerIp = "localhost";                                        // Holds the ip address to the master address, localhost for same computer
    private String gameServerIp = "";                                                   // When a game server ip is passed it goes here					
    private int masterServerPort = 9000;                                               // port  to the master server
    private int gameServerPort = 0;							// When a game server port is passed it goes here
    private static Player player;							// Holds a reference to the player data for this client
    private static boolean isPlayingSinglePlayer;					// Is the player playing the computer?
    private static GameLogic gameLogic;							// Holds a reference to the game logic, only used during single player
    private static RPSLog log;								// Reference to the lRPSLog class for printing to log files
    private Thread clientThread;                                                        // Reference to the client thread
    private static Socket socket;                                                       // Reference to the client socket
    private static DataOutputStream toServer;						// Output stream to master server or game server
    private boolean connectedToMasterServer = false;                                    // Are we connected to the master server

    /**
     * Creates new form RPSClientApplication
     */
    public RPSClientApplication() {
        
        // Setup the Client variables
	log = new RPSLog("Client");
	// Now print to the log saying the client is starting up
	log.printToLog("LOG", "Client starting up.");
        
        initComponents();
        
        // Automatically connect to master servers
        connectToMasterServer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statusBox = new javax.swing.JTextArea();
        opponentScissors = new javax.swing.JButton();
        opponentRock = new javax.swing.JButton();
        opponentPaper = new javax.swing.JButton();
        playerRock = new javax.swing.JButton();
        playerPaper = new javax.swing.JButton();
        playerScissors = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rock, Paper, Scissors");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        statusBox.setColumns(20);
        statusBox.setRows(5);
        jScrollPane1.setViewportView(statusBox);

        opponentScissors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/s.png"))); // NOI18N
        opponentScissors.setText("Scissors");
        opponentScissors.setToolTipText("");
        opponentScissors.setActionCommand("opponentScissors");
        opponentScissors.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        opponentScissors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        opponentScissors.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        opponentRock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/r.png"))); // NOI18N
        opponentRock.setText("Rock");
        opponentRock.setToolTipText("");
        opponentRock.setActionCommand("opponentRock");
        opponentRock.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        opponentRock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        opponentRock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        opponentPaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/p.png"))); // NOI18N
        opponentPaper.setText("Paper");
        opponentPaper.setToolTipText("");
        opponentPaper.setActionCommand("opponentPaper");
        opponentPaper.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        opponentPaper.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        opponentPaper.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        playerRock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/r.png"))); // NOI18N
        playerRock.setText("Rock");
        playerRock.setToolTipText("");
        playerRock.setActionCommand("playerRock");
        playerRock.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        playerRock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playerRock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        playerPaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/p.png"))); // NOI18N
        playerPaper.setText("Paper");
        playerPaper.setToolTipText("");
        playerPaper.setActionCommand("playerPaper");
        playerPaper.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        playerPaper.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playerPaper.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        playerScissors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/s.png"))); // NOI18N
        playerScissors.setText("Scissors");
        playerScissors.setToolTipText("");
        playerScissors.setActionCommand("playerScissors");
        playerScissors.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        playerScissors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playerScissors.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(opponentRock, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(opponentPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(opponentScissors, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerRock, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playerPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playerScissors, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opponentPaper, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(opponentScissors, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(opponentRock, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerPaper, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playerScissors, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playerRock, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Closes sockect connections as the app is closing
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quit();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPSClientApplication().setVisible(true);
            }
        });
    }
    
    // Class Methods
	
    // Connects to the master server
    public void connectToMasterServer() {
		
        // Connects to the master server
        // Create a handler thread
        ClientNetworkingThread task = new ClientNetworkingThread();
                
        // Start the new thread
        new Thread(task).start();   
            
    }
	
	// Lists all the available game sessions
	// Mainly effects the gui as the list will populate a menu screen.
	// Returns a list of unique gamesession ids
	public static String[] listGameSessions() {
		
		return new String[0]; 		// Change this!!!
	}
	
	// Creates a game session by telling master server to create a new session
	// Master server then takes the supplied username and creates a unique gamesessionid
	public static boolean createGameSession() {
		
		return false;				// Change this!!
	}
	
	// Joins either a newly created game session or a session listed
	// in the game session list by suppling the unique game session id
	public static boolean joinGameSession(String gameSessionId) {
		
		return false;				// Change This!!
	}
	
	// Starts a single player game
	// Will create a gameLogic object which will act as the CPU
	public static void startSinglePlayerGame() {
		
	}
	
	// Quits the game, informs master server the client is shutting down, and cleans
	// up unneeded stuff.
	public void quit() {
		// Close sockets when window is closing
            if (socket != null) {
                log.printToLog("INFO", "Closing socket connections.");
                try {
                    // Tell the master server we are closing
                    JSONObject json = new JSONObject();
                    json.put("messageType", "Action");
                    json.put("message", "ClosingConnection");
                    
                    // Gson to convert from json to string
                    Gson gson = new Gson();
                    PrintWriter pw = new PrintWriter(toServer);
                    
                    pw.println(gson.toJson(json));
                    pw.flush();
                
                    socket.close();
                }
                catch (IOException ex) {
                    log.printToLog("ERROR", ex.toString());
                }
            }
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton opponentPaper;
    private javax.swing.JButton opponentRock;
    private javax.swing.JButton opponentScissors;
    private javax.swing.JButton playerPaper;
    private javax.swing.JButton playerRock;
    private javax.swing.JButton playerScissors;
    private javax.swing.JTextArea statusBox;
    // End of variables declaration//GEN-END:variables

  // Inner class
  // Define the thread class for handling new connection
  class ClientNetworkingThread implements Runnable {
      
      // Class variables
      //private Socket socket; // A connected socket
      
      private DataInputStream fromServer;						// Input from either the game server or master server
      private boolean runThread = true;                                                 // Do we keep running the thread

    /** Construct a thread */
    public ClientNetworkingThread() {
       this.runThread = true;
    }
      
      /** Run a thread */
    public void run() {
        
        // Try connecting to the master server
        try {

            // Create a socket to connect to the server
            socket = new Socket(masterServerIp, masterServerPort);
            
            // Note it in the log
            log.printToLog("LOG", "Connect to MasterServer at IP: " + socket.getInetAddress().getHostAddress() + 
                        " on PORT: " + socket.getPort());
            
            connectedToMasterServer = true;

            // Create an input stream to receive data from the server
            fromServer = new DataInputStream( socket.getInputStream() );

            // Create an output stream to send data to the server
            toServer =  new DataOutputStream( socket.getOutputStream() );
            
            // Main Loop
            while (runThread) {
                
                // Check for data from the server
                BufferedReader in = new BufferedReader(new InputStreamReader(fromServer));
                
                if (in.ready()) {
                    Gson gson = new Gson();
                
                    JSONObject json = new JSONObject(gson.fromJson(in.readLine(), JSONObject.class));
                                        
                    if (!json.isEmpty())
                        handleDataFromServer(json);    
                }
            }
            
            // Loop not running now so close connection
            socket.close();
            fromServer.close();
            toServer.close();
        }
        catch (IOException ex) {
            log.printToLog("ERROR", ex.toString());
        }        
    }
    
    // Handles the response from the game or master server
    public void handleDataFromServer(JSONObject json) {
        //Gson gson = new Gson();
      
        //log.printToLog("TEST","Handling: " + gson.toJson(json));
        
        // Determine how to handle the message
        if (json.get("messageType").toString().equals("Test"))
            log.printToLog("TEST", (String) json.get("message"));
        else if (json.get("messageType").toString().equals("Info")) {
            log.printToLog("INFO", (String) json.get("message"));
            statusBox.setText((String) json.get("message"));
        }
    }
    
  }
    
}
