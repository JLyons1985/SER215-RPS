/*
 * This is the main application class for the rock paper scissors game.
 */
package com.ser215.rps;

// Imports
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.*;
import java.net.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import com.google.gson.Gson;

/**
 *
 * @author Josh Lyons, Nergal Givarkes
 */
public class RPSClientApplication extends javax.swing.JFrame {
    
    // Class Variables
    private String masterServerIp = "localhost";                                        // Holds the ip address to the master address, localhost for same computer
    private String gameServerIp = "";                                                   // When a game server ip is passed it goes here					
    private int masterServerPort = 90000;                                               // port  to the master server
    private int gameServerPort = 0;							// When a game server port is passed it goes here
    private static Player player;							// Holds a reference to the player data for this client
    private static boolean isPlayingSinglePlayer;					// Is the player playing the computer?
    private static GameLogic gameLogic;							// Holds a reference to the game logic, only used during single player
    private static RPSLog log;								// Reference to the lRPSLog class for printing to log files
    private Thread clientThread;
    private static DataOutputStream toServer;						// Output stream to master server or game server

    /**
     * Creates new form RPSClientApplication
     */
    public RPSClientApplication() {
        
        // Setup the Client variables
	log = new RPSLog("Client");
	// Now print to the log saying the client is starting up
	log.printToLog("LOG", "Client starting up.");
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statusBox = new javax.swing.JTextArea();
        connectToMaster = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rock, Paper, Scissors");

        statusBox.setColumns(20);
        statusBox.setRows(5);
        jScrollPane1.setViewportView(statusBox);

        connectToMaster.setText("Connect To Master Server");
        connectToMaster.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectToMasterMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectToMaster)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(372, Short.MAX_VALUE)
                .addComponent(connectToMaster)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectToMasterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectToMasterMouseClicked
        connectToMasterServer();     
    }//GEN-LAST:event_connectToMasterMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPSClientApplication().setVisible(true);
            }
        });
    }
    
    // Class Methods
	
	// Connects to the master server
	public static void connectToMasterServer() {
		
            // Connects to the master server
           
            
	}
	
	// Lists all the available game sessions
	// Mainly effects the gui as the list will populate a menu screen.
	// Returns a list of unique gamesession ids
	public static String[] listGameSessions() {
		
		return new String[0]; 		// Change this!!!
	}
	
	// Creates a game session by telling master server to create a new session
	// Master server then takes the supplied username and creates a unique gamesessionid
	public static boolean createGameSession() {
		
		return false;				// Change this!!
	}
	
	// Joins either a newly created game session or a session listed
	// in the game session list by suppling the unique game session id
	public static boolean joinGameSession(String gameSessionId) {
		
		return false;				// Change This!!
	}
	
	// Starts a single player game
	// Will create a gameLogic object which will act as the CPU
	public static void startSinglePlayerGame() {
		
	}
	
	// Quits the game, informs master server the client is shutting down, and cleans
	// up unneeded stuff.
	public static void quit() {
		
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectToMaster;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statusBox;
    // End of variables declaration//GEN-END:variables

  // Inner class
  // Define the thread class for handling new connection
  class ClientNetworkingThread implements Runnable {
      
      // Class variables
      private Socket socket; // A connected socket
      
      private DataInputStream fromServer;						// Input from either the game server or master server
      private boolean runThread = true;                                                 // Do we keep running the thread

    /** Construct a thread */
    public ClientNetworkingThread() {
       
    }
      
      /** Run a thread */
    public void run() {
        
        // Try connecting to the master server
        try {

            // Create a socket to connect to the server
            this.socket = new Socket(masterServerIp, masterServerPort);
            
            // Note it in the log
            log.printToLog("LOG", "Connect to MasterServer at IP: " + socket.getInetAddress() + 
                        " on PORT: " + socket.getPort());

            // Create an input stream to receive data from the server
            fromServer = new DataInputStream( socket.getInputStream() );

            // Create an output stream to send data to the server
            toServer =  new DataOutputStream( socket.getOutputStream() );
            
            // Main Loop
            while (runThread) {
                
                // Check for data from the server
                BufferedReader in = new BufferedReader(new InputStreamReader(fromServer));
                Gson gson = new Gson();
                
		JSONObject json = new JSONObject(gson.fromJson(in, JSONObject.class));
                
                if (!json.isEmpty())
                    handleDataFromServer(json);                
            }
            
            // Loop not running now so close connection
            socket.close();
            fromServer.close();
            toServer.close();
        }
        catch (IOException ex) {
            log.printToLog("ERROR", ex.toString());
        }        
    }
    
    public void handleDataFromServer(JSONObject json) {
        
        // Determine how o handle the message
        if (json.get("messageType") == "Test")
            log.printToLog("TEST", json.get("message").toString());
    }
  }
    
}
