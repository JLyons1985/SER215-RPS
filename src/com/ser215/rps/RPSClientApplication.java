/*
 * This is the main application class for the rock paper scissors game.
Test
 */
package com.ser215.rps;

// Imports
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.*;
import java.net.*;
import org.json.simple.JSONObject;
import com.google.gson.Gson;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import javax.swing.JOptionPane;

/**
 *
 * @author Josh Lyons, Nergal Givarkes
 */
public class RPSClientApplication extends javax.swing.JFrame {
    
    // Class Variables
    private final String masterServerIp = "localhost";                                  // Holds the ip address to the master address, localhost for same computer
    private final String gameServerIp = "localhost";                                    // When a game server ip is passed it goes here					
    private final int masterServerPort = 9000;                                          // port  to the master server
    private int gameServerPort = 0;							// When a game server port is passed it goes here
    private Player player;                                                              // Holds a reference to the player data for this client
    private boolean isPlayingSinglePlayer;                                              // Is the player playing the computer?
    private GameLogic gameLogic;							// Holds a reference to the game logic, only used during single player
    public static RPSLog log;								// Reference to the lRPSLog class for printing to log files
    private Thread clientThread;                                                        // Reference to the client thread
    private Socket socket;                                                       // Reference to the client socket
    private static DataOutputStream toServer;						// Output stream to master server or game server
    private static DataInputStream fromServer;						// Input from either the game server or master server
    private boolean connectedToMasterServer = false, connectedToGameServer = false;     // Are we connected to the master server
    private RPSGameSessionList gsList;                                                  // Holds a reference to the session list form

    /**
     * Creates new form RPSClientApplication
     */
    public RPSClientApplication() {
        
        // Setup the Client variables
	log = new RPSLog("Client");
	// Now print to the log saying the client is starting up
	log.printToLog("LOG", "Client starting up.");
        
        // Setup player
        this.player = new Player();
        
        // Setup game logic
        this.gameLogic = new GameLogic(false);
        
        initComponents();
        
        // Load player previous data from file
        loadPlayerDataFromFile();
        loadPlayerDataToGui();
       
        // Automatically connect to master servers
        connectToMasterServer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opponentScissors = new javax.swing.JButton();
        opponentRock = new javax.swing.JButton();
        opponentPaper = new javax.swing.JButton();
        playerRock = new javax.swing.JButton();
        playerPaper = new javax.swing.JButton();
        playerScissors = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatMessages = new javax.swing.JTextArea();
        chatInput = new javax.swing.JTextField();
        chatSend = new javax.swing.JButton();
        oponnentUsername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        playerUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        shutDownServer = new javax.swing.JButton();
        showGameSessions = new javax.swing.JButton();
        playerTotalWins = new javax.swing.JTextField();
        playerTotalTies = new javax.swing.JTextField();
        playerTotalLosses = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        oponnentTotalLosses = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        oponnentTotalTies = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        oponnentTotalWins = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        startSinglePlayerGame = new javax.swing.JButton();
        round = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        turn = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rock, Paper, Scissors");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        opponentScissors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/s.png"))); // NOI18N
        opponentScissors.setText("Scissors");
        opponentScissors.setToolTipText("");
        opponentScissors.setActionCommand("opponentScissors");
        opponentScissors.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        opponentScissors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        opponentScissors.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        opponentRock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/r.png"))); // NOI18N
        opponentRock.setText("Rock");
        opponentRock.setToolTipText("");
        opponentRock.setActionCommand("opponentRock");
        opponentRock.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        opponentRock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        opponentRock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        opponentPaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/p.png"))); // NOI18N
        opponentPaper.setText("Paper");
        opponentPaper.setToolTipText("");
        opponentPaper.setActionCommand("opponentPaper");
        opponentPaper.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        opponentPaper.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        opponentPaper.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        playerRock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/r.png"))); // NOI18N
        playerRock.setText("Rock");
        playerRock.setToolTipText("");
        playerRock.setActionCommand("playerRock");
        playerRock.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        playerRock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playerRock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playerRock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerRockActionPerformed(evt);
            }
        });

        playerPaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/p.png"))); // NOI18N
        playerPaper.setText("Paper");
        playerPaper.setToolTipText("");
        playerPaper.setActionCommand("playerPaper");
        playerPaper.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        playerPaper.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playerPaper.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playerPaper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerPaperActionPerformed(evt);
            }
        });

        playerScissors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ser215/rps/s.png"))); // NOI18N
        playerScissors.setText("Scissors");
        playerScissors.setToolTipText("");
        playerScissors.setActionCommand("playerScissors");
        playerScissors.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        playerScissors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playerScissors.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playerScissors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerScissorsActionPerformed(evt);
            }
        });

        chatMessages.setColumns(20);
        chatMessages.setLineWrap(true);
        chatMessages.setRows(5);
        jScrollPane2.setViewportView(chatMessages);

        chatInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatInputActionPerformed(evt);
            }
        });

        chatSend.setText("Send");
        chatSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatSendActionPerformed(evt);
            }
        });

        oponnentUsername.setEditable(false);
        oponnentUsername.setToolTipText("");

        jLabel1.setLabelFor(oponnentUsername);
        jLabel1.setText("Username");

        playerUsername.setToolTipText("");
        playerUsername.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                playerUsernameInputMethodTextChanged(evt);
            }
        });
        playerUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerUsernameActionPerformed(evt);
            }
        });

        jLabel2.setLabelFor(oponnentUsername);
        jLabel2.setText("Username");

        shutDownServer.setText("Shutdown Master Server");
        shutDownServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutDownServerActionPerformed(evt);
            }
        });

        showGameSessions.setText("Join Game Session");
        showGameSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGameSessionsActionPerformed(evt);
            }
        });

        playerTotalWins.setEditable(false);
        playerTotalWins.setToolTipText("");

        playerTotalTies.setEditable(false);
        playerTotalTies.setToolTipText("");

        playerTotalLosses.setEditable(false);
        playerTotalLosses.setToolTipText("");

        jLabel3.setText("Losses");

        jLabel4.setText("Ties");

        jLabel5.setText("Wins");

        oponnentTotalLosses.setEditable(false);
        oponnentTotalLosses.setToolTipText("");

        jLabel6.setText("Losses");

        oponnentTotalTies.setEditable(false);
        oponnentTotalTies.setToolTipText("");

        jLabel7.setText("Ties");

        oponnentTotalWins.setEditable(false);
        oponnentTotalWins.setToolTipText("");

        jLabel8.setText("Wins");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Totals");

        startSinglePlayerGame.setText("Start Single Player");
        startSinglePlayerGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSinglePlayerGameActionPerformed(evt);
            }
        });

        round.setEditable(false);
        round.setToolTipText("");

        jLabel10.setText("Round");

        turn.setEditable(false);
        turn.setToolTipText("");

        jLabel11.setText("Turn");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shutDownServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showGameSessions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startSinglePlayerGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(opponentRock, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(opponentPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(opponentScissors, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playerRock, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(playerPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(playerScissors, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chatInput, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chatSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(round, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(turn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerTotalTies, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerTotalLosses, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel2))
                            .addComponent(playerTotalWins, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oponnentUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel8))
                            .addComponent(oponnentTotalTies, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oponnentTotalLosses, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel7))
                            .addComponent(oponnentTotalWins, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel5))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startSinglePlayerGame, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showGameSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shutDownServer, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(opponentPaper, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(opponentScissors, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(opponentRock, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(chatInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chatSend)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oponnentUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oponnentTotalWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oponnentTotalTies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addGap(4, 4, 4)
                                .addComponent(oponnentTotalLosses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(turn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(playerScissors))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerTotalWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerTotalTies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(4, 4, 4)
                                .addComponent(playerTotalLosses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(round, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(playerPaper)
                                    .addComponent(playerRock))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Closes sockect connections as the app is closing
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quit();
    }//GEN-LAST:event_formWindowClosing

    // Sends the message in the chatInput to the master server to be sent out to other players
    private void chatSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatSendActionPerformed
        
        // First construct the message String
        String tmpMessage = this.player.getPlayerUsername() + ": ";
        tmpMessage = tmpMessage + chatInput.getText();
        
        // Now send the message to the server
        sendMessageToServer("ChatMessage", tmpMessage);
        
        // Now clear the inputMessage
        chatInput.setText("");
        
    }//GEN-LAST:event_chatSendActionPerformed
    
    // Changes the players username when the username field is changed
    private void playerUsernameInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_playerUsernameInputMethodTextChanged
        this.player.setPlayerUsername(playerUsername.getText());
    }//GEN-LAST:event_playerUsernameInputMethodTextChanged

    // Changes the players username when the username field is changed
    private void playerUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerUsernameActionPerformed
        this.player.setPlayerUsername(playerUsername.getText());
        this.player.setPlayerId(playerUsername.getText());
    }//GEN-LAST:event_playerUsernameActionPerformed

    // Sends the message in the chatInput to the master server to be sent out to other players
    private void chatInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatInputActionPerformed
        // First construct the message String
        String tmpMessage = this.player.getPlayerUsername() + ": ";
        tmpMessage = tmpMessage + chatInput.getText();
        
        // Now send the message to the server
        sendMessageToServer("ChatMessage", tmpMessage);
        
        // Now clear the inputMessage
        chatInput.setText("");
    }//GEN-LAST:event_chatInputActionPerformed

    // Tells the master server to shutdown
    private void shutDownServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutDownServerActionPerformed
        
        // Create an input dialog asking for password
        String input = (String) JOptionPane.showInputDialog(rootPane, "What is the Master Server's password.", "Input Password", JOptionPane.PLAIN_MESSAGE);
        
        // Now send the message
        // Create JSON and GSon objects
        JSONObject json = new JSONObject();
        Gson gson = new Gson();
            
        // Put message into JSON
        json.put("messageType", "Action");
        json.put("message", "Shutdown");
        json.put("password", input);
            
        //Make printer writer
        PrintWriter pw = new PrintWriter(toServer);
            
        // Send the message
        pw.println(gson.toJson(json));
        pw.flush();
        
    }//GEN-LAST:event_shutDownServerActionPerformed

    // Show tyhe game session form
    private void showGameSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGameSessionsActionPerformed
        
        // Are we connected to master server right now
        if (connectedToMasterServer){
            gsList = new RPSGameSessionList(this, true);
            gsList.setVisible(true);
        }
        else if (connectedToGameServer){
            
            // Connected to game server so connect back to master server and tell game server you quit.
            sendMessageToServer("Action", "ClosingConnection");
            
            String tmpMessages;
            tmpMessages = chatMessages.getText();
            tmpMessages = tmpMessages + "[SYSTEM] " + "Leaving game session. " + "\n";
            chatMessages.setText(tmpMessages);
            
            try {
                // Create a socket to connect to the server
                Socket tmpSocket = new Socket(masterServerIp, masterServerPort);
            
                // Note it in the log
                log.printToLog("LOG", "Connect to MasterServer at IP: " + tmpSocket.getInetAddress().getHostAddress() + 
                        " on PORT: " + tmpSocket.getPort());
            
                connectedToMasterServer = true;
                connectedToGameServer = false;
            
                this.socket = tmpSocket;
            
                toServer = new DataOutputStream(this.socket.getOutputStream());
                fromServer = new DataInputStream(this.socket.getInputStream());
            }
            catch (IOException ex) {
                log.printToLog("ERROR", ex.toString());
            }
            
            // Change the button text back to join
            changeGameSessionText("Join Game Session");
            
        }
    }//GEN-LAST:event_showGameSessionsActionPerformed

    // Change jjoin game session button text
    public void changeGameSessionText(String text) {
        // Change button back to join game sessions
        this.showGameSessions.setText(text);
    }
    // Starting single player game
    private void startSinglePlayerGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSinglePlayerGameActionPerformed
        
        // Variables
        this.gameLogic = new GameLogic(true);
        this.gameLogic.handleNewPlayer(this.player);
        this.isPlayingSinglePlayer = true;
        
        // Let the player know a new single player game has started
        String tmpMessages = chatMessages.getText();
        tmpMessages = tmpMessages + "[SYSTEM] New single player game started. Begin by making your first throw! \n";
        chatMessages.setText(tmpMessages);
        
        // Start a new round
        this.gameLogic.newRound();
        
        // Load opponent data
        Player tmpPlayer = this.gameLogic.getPlayerData(2);
        loadOponnentDataToGui(tmpPlayer);
        
        // Update gui with new data
        updateGameDataOnGui();
        
    }//GEN-LAST:event_startSinglePlayerGameActionPerformed

    // Player clicked on the rock button
    private void playerRockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerRockActionPerformed
       makeAThrow(0);
    }//GEN-LAST:event_playerRockActionPerformed

    // Player clicked on the paper buttn
    private void playerPaperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerPaperActionPerformed
        makeAThrow(1);
    }//GEN-LAST:event_playerPaperActionPerformed

    // Player clicked on the scissors button
    private void playerScissorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerScissorsActionPerformed
        makeAThrow(2);
    }//GEN-LAST:event_playerScissorsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPSClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPSClientApplication().setVisible(true);
            }
        });
    }
    
    // Class Methods
    
    // Make a throw
    public void makeAThrow (int throwType) {
        // First is this a single player game
        if (this.isPlayingSinglePlayer) {
            // Single player so talk to local game logic
            
            // Can the player go or have they already used this throw
            if (this.gameLogic.canPlayerMakeThrow(this.player.getPlayerId(), throwType)) {
                // Player can make this throw so make it
                
            }
            else {
                // Player cant make this throw so tell them
                String tmpMessages = chatMessages.getText();
                tmpMessages = tmpMessages + "[SYSTEM] You can not make the same throw twice in a round make another. \n";
                chatMessages.setText(tmpMessages);
            }
        }
    }
    
    // Update gui from game logic
    public void updateGameDataOnGui() {
        this.round.setText(String.valueOf(this.gameLogic.getRound()));
        this.turn.setText(String.valueOf(this.gameLogic.getTurn()));
    }
    
    // Loads the player data to the gui
    private void loadPlayerDataToGui() {
        this.playerUsername.setText(this.player.getPlayerUsername());
        this.playerTotalWins.setText(String.valueOf(this.player.getWinsTotal()));
        this.playerTotalTies.setText(String.valueOf(this.player.getTiesTotal()));
        this.playerTotalLosses.setText(String.valueOf(this.player.getLossesTotal()));
    }
    
    // Loads the oponnent data to gui
    private void loadOponnentDataToGui (Player player){
        this.oponnentUsername.setText(player.getPlayerUsername());
        this.oponnentTotalWins.setText(String.valueOf(player.getWinsTotal()));
        this.oponnentTotalTies.setText(String.valueOf(player.getTiesTotal()));
        this.oponnentTotalLosses.setText(String.valueOf(player.getLossesTotal()));
    }
    
    // Load player data from file
    private void loadPlayerDataFromFile() {
        
        // Load file
        Path path = Paths.get("./saves/userData.txt");
        
        if (Files.exists(path)) {
        
            try {
                byte[] encoded = Files.readAllBytes(path);
                String jsonString = new String(encoded, StandardCharsets.UTF_8);
            
                Gson gson = new Gson();
                JSONObject json = new JSONObject(gson.fromJson(jsonString, JSONObject.class));
            
                // Now put the variables where the need to go
                this.player.setPlayerUsername(json.get("playerUsername").toString());
                this.player.setPlayerId(json.get("playerId").toString());
                this.player.setWinsTotal(Integer.parseInt(json.get("winsTotal").toString()));
                this.player.setTiesTotal(Integer.parseInt(json.get("tiesTotal").toString()));
                this.player.setLossesTotal(Integer.parseInt(json.get("lossesTotal").toString()));
            }
            catch (IOException ex) {
                log.printToLog("ERROR", ex.toString());
            }  
        }
    }
    
    // Saves player data to file
    private void savePlayerDataToFile() {
        
        // Variables
        JSONObject json = new JSONObject();
        
        // Load json with data
        json.put("playerUsername", player.getPlayerUsername());
        json.put("playerId", player.getPlayerId());
        json.put("winsTotal", String.valueOf(player.getWinsTotal()));
        json.put("tiesTotal", String.valueOf(player.getTiesTotal()));
        json.put("lossesTotal", String.valueOf(player.getLossesTotal()));
        
        // Now save to file
        try {
            // First check if the directory exists
            if (!Files.isDirectory(Paths.get("./saves/"))) {
                // Create the directory
                Files.createDirectory(Paths.get("./saves/"));
            }
            
            Path path = Paths.get("./saves/userData.txt");
            FileOutputStream fos = new FileOutputStream(path.toString());
            
            byte[] encoded = json.toJSONString().getBytes(StandardCharsets.UTF_8);
            
            fos.write(encoded);
            
            fos.flush();
            fos.close();
        }
        catch (IOException ex) {
            log.printToLog("ERROR", ex.toString());
        }        
    }
	
    // Connects to the master server
    public void connectToMasterServer() {
		
        // Connects to the master server
        // Create a handler thread
        ClientNetworkingThread task = new ClientNetworkingThread();
                
        // Start the new thread
        new Thread(task).start();   
            
    }
	
    // Lists all the available game sessions
    // Mainly effects the gui as the list will populate a menu screen.
    // Returns a list of unique gamesession ids
    public void listGameSessions(JSONObject json) {
		
        // Send the string array of sessions to the game sessions list
        String[] tmpArray = new String[Integer.parseInt(json.get("numOfGames").toString())];
        
        for (int i = 0; i < tmpArray.length; i++) {
            tmpArray[i] = json.get("server" + i).toString();
        }
        
        // Now send that array to the game sessions list
        log.printToLog("INFO", tmpArray.toString());
        gsList.refreshList(tmpArray);
        
    }
	
    // Creates a game session by telling master server to create a new session
    // Master server then takes the supplied username and creates a unique gamesessionid
    public boolean createGameSession() {
	
        // Create JSON and GSon objects
        JSONObject json = new JSONObject();
        Gson gson = new Gson();
            
        // Put message into JSON
        json.put("messageType", "Action");
        json.put("message", "CreateGameServer");
        json.put("password", "shuttlebutt");
            
        //Make printer writer
        PrintWriter pw = new PrintWriter(toServer);
        
        log.printToLog("INFO", "Sending create game session");
            
        // Send the message
        pw.println(gson.toJson(json));
        pw.flush();

	return true;				
    }
	
    // Sets the socket to either the game server or the master server
    public void joinGameSession(int port) {
	
        try {
            // Create a socket to connect to the server
            Socket tmpSocket = new Socket(gameServerIp, port);
            
            // Note it in the log
            log.printToLog("LOG", "Connect to GameServer at IP: " + tmpSocket.getInetAddress().getHostAddress() + 
                        " on PORT: " + tmpSocket.getPort());
            
            connectedToMasterServer = false;
            connectedToGameServer = true;
            
            this.socket = tmpSocket;
            
            toServer = new DataOutputStream(this.socket.getOutputStream());
            fromServer = new DataInputStream(this.socket.getInputStream());
        }
        catch (IOException ex) {
            log.printToLog("ERROR", ex.toString());
        }     
    }
    
    // Grabs the master server i[
    public String getMasterServerIp() {
        return this.masterServerIp;
    }
	
    // Sends a message to the server
    public void sendMessageToServer(String messageType, String message) {
             
        // Create JSON and GSon objects
        JSONObject json = new JSONObject();
        Gson gson = new Gson();
            
        // Put message into JSON
        json.put("messageType", messageType);
        json.put("message", message);
            
        //Make printer writer
        PrintWriter pw = new PrintWriter(toServer);
            
        // Send the message
        pw.println(gson.toJson(json));
        pw.flush();
                        
    }
        
    // Quits the game, informs master server the client is shutting down, and cleans
    // up unneeded stuff.
	public void quit() {
		// Close sockets when window is closing
            if (socket != null) {
                log.printToLog("INFO", "Closing socket connections.");
                try {
                    // Tell the master server we are closing
                    sendMessageToServer("Action", "ClosingConnection");
                
                    socket.close();
                }
                catch (IOException ex) {
                    log.printToLog("ERROR", ex.toString());
                }
            }
            
            savePlayerDataToFile();
	}
        
    // Refresh gui from gameLogic
    public void refreshGui() {
        // First load all pertinent data from gameLogic
        this.updateGameDataOnGui();
        
        // Now load the player data first see which player the user is
        if (player.getPlayerId().equals(gameLogic.getPlayerData(1).getPlayerId())) {
            // user is player one
            
            // Update player data
            player = gameLogic.getPlayerData(1);
            this.loadPlayerDataToGui();
            this.loadOponnentDataToGui(gameLogic.getPlayerData(2));
        }
        else{ // user is player two
            // Update player data
            player = gameLogic.getPlayerData(2);
            this.loadPlayerDataToGui();
            this.loadOponnentDataToGui(gameLogic.getPlayerData(1));
        }
        
        // Now update throw boxes disable or change image based on if they used them or not
        // Player
        
        // Oponnent
            
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField chatInput;
    private javax.swing.JTextArea chatMessages;
    private javax.swing.JButton chatSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField oponnentTotalLosses;
    private javax.swing.JTextField oponnentTotalTies;
    private javax.swing.JTextField oponnentTotalWins;
    private javax.swing.JTextField oponnentUsername;
    private javax.swing.JButton opponentPaper;
    private javax.swing.JButton opponentRock;
    private javax.swing.JButton opponentScissors;
    private javax.swing.JButton playerPaper;
    private javax.swing.JButton playerRock;
    private javax.swing.JButton playerScissors;
    private javax.swing.JTextField playerTotalLosses;
    private javax.swing.JTextField playerTotalTies;
    private javax.swing.JTextField playerTotalWins;
    private javax.swing.JTextField playerUsername;
    private javax.swing.JTextField round;
    private javax.swing.JButton showGameSessions;
    private javax.swing.JButton shutDownServer;
    private javax.swing.JButton startSinglePlayerGame;
    private javax.swing.JTextField turn;
    // End of variables declaration//GEN-END:variables

  // Inner class
  // Define the thread class for handling new connection
  class ClientNetworkingThread implements Runnable {
      
      // Class variables
      //private Socket socket; // A connected socket
      
      
      private boolean runThread = true;                                                 // Do we keep running the thread

    /** Construct a thread */
    public ClientNetworkingThread() {
       this.runThread = true;
    }
      
      /** Run a thread */
    public void run() {
        
        // Try connecting to the master server
        try {

            // Create a socket to connect to the server
            socket = new Socket(masterServerIp, masterServerPort);
            
            // Note it in the log
            log.printToLog("LOG", "Connect to MasterServer at IP: " + socket.getInetAddress().getHostAddress() + 
                        " on PORT: " + socket.getPort());
            
            connectedToMasterServer = true;

            // Create an input stream to receive data from the server
            fromServer = new DataInputStream( socket.getInputStream() );

            // Create an output stream to send data to the server
            toServer =  new DataOutputStream( socket.getOutputStream() );
            
            // Main Loop
            while (runThread) {
                
                // Check for data from the server
                BufferedReader in = new BufferedReader(new InputStreamReader(fromServer));
                
                if (in.ready()) {
                    Gson gson = new Gson();
                
                    JSONObject json = new JSONObject(gson.fromJson(in.readLine(), JSONObject.class));
                                        
                    if (!json.isEmpty())
                        handleDataFromServer(json);    
                }
            }
            
            // Loop not running now so close connection
            socket.close();
            fromServer.close();
            toServer.close();
        }
        catch (IOException ex) {
            log.printToLog("ERROR", ex.toString());
        }        
    }
    
    // Handles the response from the game or master server
    public void handleDataFromServer(JSONObject json) {
        
        // Variables
        String tmpMessages;
        JSONObject tmpJson;
        Gson gson;
        
        // Determine how to handle the message
        switch (json.get("messageType").toString()) {
            case "Test":
                log.printToLog("TEST", (String) json.get("message"));
                break;
                
            case "Info":
                tmpMessages = chatMessages.getText();
                tmpMessages = tmpMessages + "[SYSTEM] " + json.get("message").toString() + "\n";
                chatMessages.setText(tmpMessages);
                log.printToLog("INFO", (String) json.get("message"));
                break;
                
            case "ChatMessage":
                // Add the message to the chat box
                tmpMessages = chatMessages.getText();
                tmpMessages = tmpMessages + json.get("message").toString() + "\n";
                chatMessages.setText(tmpMessages);
                break;
                
            case "Action":
                switch (json.get("message").toString()){
                    
                    case "SendPlayerData":
                        log.printToLog("INFO", "Sending player data for new game.");
                
                        // Create json of player data
                        tmpJson = new JSONObject();
                        gson = new Gson();
            
                        // Put message into JSON
                        tmpJson.put("messageType", "NewPlayer");
                        tmpJson.put("message", "NewPlayer");
                        tmpJson.put("playerId", player.getPlayerId());
                        tmpJson.put("playerUsername", player.getPlayerUsername());
                        tmpJson.put("totalWins", String.valueOf(player.getWinsTotal()));
                        tmpJson.put("totalTies", String.valueOf(player.getTiesTotal()));
                        tmpJson.put("totalLosses", String.valueOf(player.getLossesTotal()));
            
                        //Make printer writer
                        PrintWriter pw = new PrintWriter(toServer);
            
                        // Send the message
                        pw.println(gson.toJson(tmpJson));
                        pw.flush();
                        break;
                        
                    case "RequestedGames":
                        // Create json of player data    
                        gson = new Gson();
                        tmpJson = new JSONObject(gson.fromJson(json.get("messageJson").toString(), JSONObject.class));
                
                        listGameSessions(tmpJson);
                        break;
                }
                break;
                
            case "UpdateGameLogic":
                // create json from string
                gson = new Gson();
                tmpJson = new JSONObject(gson.fromJson(json.get("messageJson").toString(), JSONObject.class));
            
                 // update game logic
                gameLogic.setGameLogicFromJson(tmpJson);
            
                // Now refresh gui
                refreshGui();
                break;
                
            case "GameSessionCreated":
                // Request the list of games
                sendMessageToServer("Action", "RequestGames");
                break;
        }

    }
    
  }
    
}
